#include "decoder.h"
#include "ui_decoder.h"
#include <QtGui>
#include <IT/Xenon.h>
#include <QTimer>

Decoder::Decoder(QWidget *parent) : QMainWindow(parent), ui(new Ui::Decoder) {
    ui->setupUi(this);
    connect(ui->decodeMessage, &QPushButton::clicked, this, &Decoder::buttonClicked);
    ui->decode->viewport()->setAttribute(Qt::WA_AcceptTouchEvents);

    try {
        initialize_vectors();
#ifdef ANDROID
        copy_xddl_assets();
#endif
        ui->decodeMessage->setEnabled(false);
        print("loading  spec...");

        // Let the mainwindow finish drawing and then load the spec. 
        //
        // I tried to use QFuture for this operation, but it doesn't seem to be supported.  Probably should just
        // use std::future instead.
        QTimer::singleShot(200, this, SLOT(load_spec()));
    } catch (IT::Exception & e) {
        print(e.what());
    }
}

void Decoder::load_spec() {
    try {
#ifdef ANDROID
        spec.open("files/xddl/icd.xddl");
#else
        spec.open("/opt/xenon-android/dist/assets/xddl/icd.xddl");
#endif
        print("spec loaded");
        print(spec.stats());

        // display hex messages
        for (auto const & bs : test_vector) {
            // just show the first few bytes followed by "..."
            QString result = bs.toHexString().c_str();
            if (result.size() > 23) result = result.left(20) + "...";
            print(result);
        }

        ui->decodeMessage->setEnabled(true);
    } catch (IT::Exception & e) {
        print(e.what());
    }
}

void Decoder::print(const char * info) {
    ui->decode->append(QString(info));
}

void Decoder::print(IT::String info) {
    ui->decode->append(info.c_str());
}

void Decoder::print(QString info) {
    ui->decode->append(info);
}



Decoder::~Decoder()
{
    delete ui;
}

void Decoder::buttonClicked() {

    try {
        ui->decode->clear();
        IT::Message m(spec);
        for (auto const & bs : test_vector) {
            m = bs;
            auto n = m.find("Name");
            print(n.description());
        }
    } catch (IT::Exception & e) {
        print(e.what());
    }
}

static void find_assets(QDir dir, QStringList& assets)
{
    QStringList entries = dir.entryList(QStringList() << "*.xo" << "*.xddl", QDir::Files);
    for ( auto const & entry : entries )
       assets << dir.canonicalPath() + entry;

    QFileInfoList infoEntries = dir.entryInfoList( QStringList(), QDir::AllDirs | QDir::NoSymLinks | QDir::NoDotAndDotDot );
    for ( auto const & infoEntry : infoEntries )
        find_assets( QDir( infoEntry.absoluteFilePath() ), assets );
}

void Decoder::copy_asset( const QString& asset, const QString& file )
{
    QFile asset_file(asset);
    if (!asset_file.open(QIODevice::ReadOnly)) IT_THROW("cannot find asset " << asset.toStdString());

    // read the asset
    QByteArray asset_data = asset_file.readAll();
    if (asset_data.isEmpty()) IT_THROW("could not read " << asset.toStdString());

    // create the dest file
    QFileInfo dest_info(file);
    QDir dir;

    if (!dir.mkpath(dest_info.path())) IT_THROW("cannot create file path " << dest_info.path().toStdString());
    QFile dest_file(file);
    if (!dest_file.open(QIODevice::WriteOnly)) IT_THROW("cannot open file " << file.toStdString());

    // write it
    dest_file.write(asset_data);
}

// This step is required because xenon does not know how to read from the assets filesystem.  
void Decoder::copy_xddl_assets() 
{
    QStringList assets;
    QDir asset_dir( "assets:/xddl" );
    find_assets( asset_dir, assets );

    if (assets.empty()) IT_THROW("asset directory is empty");

    size_t asset_path_len = asset_dir.absolutePath().size();
    for ( auto const & asset : assets ) {
        QString file = "files/xddl" + asset.right( asset.size() - asset_path_len );
        copy_asset(asset, file);
    }
}


void Decoder::initialize_vectors() {

    /* A bunch of real world messages taken from the Intrig regression tests. */
    test_vector = {
        "0101012F0CEC4A07CFF3C7CC01054142434445020B0000020406080A0C0E1012030C00000020406080A0C0E101201C7C1038",
        "0101021C22EA6660DBB830E290000100040000011B00050420C00240006822",
        "0102000F00000021010010000000000000000000000000000000068000111DA0B31FD50000D0CA6000",
        "0102000F0000000A00010000000001000102",
        "010200020000000B014000015607B220410410",
        "0200014B880000A0000432AAD506A556A88A48304480018001180CC0D5D62192C028059ECA46771000A1B84271CFBDE899EBB65CA138E7DEF44CF5DB2F509C73EF7A267AED97684E39F7BD133D76CBC9B1A812792565A1220D00",
        "0300022000120E8802F00006A40184",
        "03000220000E0E860006A40184",
        "0300022000480EA4022222222222222222222222222222222220242A283B8C120200222026318A082C2C",
        "020000208003B88C128B1B4328B0B4528B2B4728A6B492897B4B28A4B4D28A5B4F289FB5128B7B532896B552895B57289D759288075B288275D28B375F2891B612890B6328B51484585858B82180BB0B7510A0060293ECADD4FF9C20",
        "C308CF01377CFDAD330001000000023C0201381000010C8018387F070FD781660020060090A1407FFFFF20CAAB541A955AA22920C102000600054384071CFBDF280E39F7BF501C73EF7DA038E7DEF72C0D3D4A4D24B7A4481B3708864118864158864138864000",
        "C308CE8D478A32241C000000000004241615A000000A37320001280024100000221800808C27537C72650207420149062000F110000100696201C101091E0B565A57496E7465726E6574066D6363303031056D6E63303104677072730D030000000000000001C0A809012735800003100000000000000000000000000000000000031000000000000000000000000000000000000D0400000000000D0400000000500BF600F11000010100000001640100607C1F61B481F51C052CD120",
        "C308CE82BAA2E78CFA00000000000222200001013117D18D2E49030741110BF600F1100001010000000102E06000110201D031D1270A80000300000A00000D005200F1100001",
        "C308CE82BAA35B806200000000000424060404313DF02F8F98103A100A4831000788800008031A900E080848F05AB2D2BA4A72A22A92722AA0336B1B198181882B6B73198188233B839398280E0540480AC19139AC0000188000000000000000000000000000000000001880000000000000000000000000000000000068200000000000682000000002805FB00788800008080000000B20080303E0FA89A40FA8E0286689",
        "030002222000010137171A8062CA9B0741110BF60001100001010000000102E06000170201D031D1271080000100000300000A00000C00000D00520001100001",
        "C308CFA5A50B12032200000000000222009A0E82E4101220202064A8ED300BC0C1C0C00200200465A0224E1500000400001800001A00B810066207EBC275202206AE31644018C02843D948CEE28512D72B00801000043E0408048008BA0206",
        "03000540001000000010",
        "C308D01F7503A232F8000100008004240603593FBCEC3E100A75F07B23280BFC7C921AF423F8CCE6BB2ABCFAAE32E5A6B8879A14BB23790207AA31D0405070837D83CD0AD48CB2CD03E2D7A5AEF7D505D9C59BD65A5C88C67740BF68E1BE87D6D1F6D7438D089CD7572F15397914CC502FBAC131F485CB92E72ABAD0A9DB43811F99C0327003EA26903EA380A19A249A0070",
        "C308D01F7503ADBD280001000080024801A4ED08FBBE002BC88AA9553E5060",
        "C308D0F97E1C8EFFFB0001000000024809E2EC12F190A0C0E902417EC26002800020200000002B00BC0E1808012A42600280002B81400AE04C0086207CBC07D202206AEB14C4016C02809DECA467710F1A52080100804C00000043E00BA0207C00",
        "C308D12B29B3196A890000000000040C01893EEA75799018109689D1392C04010880100000840830000000041830000000000068200000000000682000000000007000",
        "C308D12B38E0B84CCA0000000000040C01893ED994E0F818101E88F9392C04010880100000840830000000041830000000000068200000000000682000000000007000",
        "0101046B102C000114E03003603800203801C03801E03801F03003703000203000903000603000E03001203001303800003001103000303800803002003002103001903001603000F03000703000403000C03000503000D1A03C9E16C18070DE2C7CFF3C7CC1001E00E01C000389",
        "010103284468B272EBE6907207CFF3C7CC002E120CD46000601C88888880009631CBE5E5472310333572CF",
        "C308D0F97E1C8EFFFB0001000000024809E2EC12F190A0C0E902417EC26002800020200000002B00BC0E1808012A42600280002B81400AE04C0086207CBC07D202206AEB14C4016C02809DECA467710F1A52080100804C00000043E00BA0207C00",
        "C308D12B29B3196A890000000000040C01893EEA75799018109689D1392C04010880100000840830000000041830000000000068200000000000682000000000007000",
        "C308D12B38E0B84CCA0000000000040C01893ED994E0F818101E88F9392C04010880100000840830000000041830000000000068200000000000682000000000007000",
        "C308D1472EEFC299D40000000000060003018C1FAD90001801520040028200005354AAD3DA18D73B9830140A4800",
        "C308D142E39B0FC731000000000004241615A040000B4F32102021FD9000C8F08001400120820A380120820000210A318000404213AB3B0ACE0103A10124831009800A000080292916E080848F85B73C3A33B2B7383437B7328336B7319A18980336B1B19998980233B839398280E05404809392C04010880100000840830000000041830000000000068200000000000682000000000007002805FB09800A000080800000008989800A00009182FA000000008BA1320080B43811F99C0327003EA26903EA380A19A249A007",
        "C308D0FF2378ED2577000000000004241615E00000043FB200004B00A4100000221800405913DC9E8A298103A10124831009800A0000804029016080848F85B73C3A33B2B7383437B7328336B1B19998980336B7319A18980233B8393986818000000000000000E054048093A5C040108801000008408300000000418300000000000188000000000000000000000000000000000001880000000000000000000000000000000000068200000000000682000000000007002805FB09800A000080800000008989800A00009182FA000000008BA1320080B43811F99C0327003EA26903EA380A19A249A007",
#if 0
#endif
    };
}
